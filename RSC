-- Criação do Banco de Dados
CREATE DATABASE GerenciamentoEventos;
USE GerenciamentoEventos;

-- Criação das Tabelas

-- Tabela Eventos
CREATE TABLE Eventos (
    id_evento INT AUTO_INCREMENT PRIMARY KEY,
    nome_evento VARCHAR(100) NOT NULL,
    data DATE NOT NULL,
    local VARCHAR(100),
    descricao TEXT
);

-- Tabela Participantes
CREATE TABLE Participantes (
    id_participante INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    telefone VARCHAR(15)
);

-- Tabela Inscricoes
CREATE TABLE Inscricoes (
    id_inscricao INT AUTO_INCREMENT PRIMARY KEY,
    id_evento INT,
    id_participante INT,
    data_inscricao DATE NOT NULL,
    FOREIGN KEY (id_evento) REFERENCES Eventos(id_evento),
    FOREIGN KEY (id_participante) REFERENCES Participantes(id_participante)
);

-- Inserção de Dados

-- Inserindo eventos
INSERT INTO Eventos (nome_evento, data, local, descricao) VALUES
('Workshop de SQL', '2024-10-01', 'Auditório Principal', 'Workshop sobre SQL e bancos de dados relacionais'),
('Palestra sobre IA', '2024-10-10', 'Sala de Conferências', 'Palestra sobre Inteligência Artificial e suas aplicações'),
('Seminário de Desenvolvimento', '2024-10-15', 'Sala de Treinamento', 'Seminário sobre Desenvolvimento de Software e Boas Práticas');

-- Inserindo participantes
INSERT INTO Participantes (nome, email, telefone) VALUES
('João Silva', 'joao.silva@example.com', '111222333'),
('Maria Oliveira', 'maria.oliveira@example.com', '444555666'),
('Pedro Santos', 'pedro.santos@example.com', '777888999');

-- Inserindo inscrições
INSERT INTO Inscricoes (id_evento, id_participante, data_inscricao) VALUES
(1, 1, '2024-09-20'),
(1, 2, '2024-09-21'),
(2, 1, '2024-09-22'),
(2, 3, '2024-09-23'),
(3, 2, '2024-09-24');

-- Consultas e Relatórios

-- 1. Mostre todos os eventos disponíveis
SELECT * FROM Eventos;

-- 2. Liste todos os participantes inscritos em um evento específico (por exemplo, id_evento = 1)
SELECT p.nome, p.email, p.telefone
FROM Inscricoes i
JOIN Participantes p ON i.id_participante = p.id_participante
WHERE i.id_evento = 1;

-- 3. Verifique todos os eventos em que um determinado participante está inscrito (por exemplo, id_participante = 1)
SELECT e.nome_evento, e.data, e.local
FROM Inscricoes i
JOIN Eventos e ON i.id_evento = e.id_evento
WHERE i.id_participante = 1;

-- 4. Liste todos os participantes que se inscreveram em mais de um evento
SELECT p.nome, p.email, COUNT(i.id_evento) AS total_eventos
FROM Participantes p
JOIN Inscricoes i ON p.id_participante = i.id_participante
GROUP BY p.id_participante
HAVING COUNT(i.id_evento) > 1;

-- Atualização de Dados

-- 1. Atualize informações de eventos (por exemplo, atualizar o local e a data de um evento com id_evento = 1)
UPDATE Eventos
SET local = 'Auditório Novo', data = '2024-10-05'
WHERE id_evento = 1;

-- 2. Atualize as informações de contato de um participante (por exemplo, id_participante = 1)
UPDATE Participantes
SET telefone = '999888777'
WHERE id_participante = 1;

-- Exclusão de Dados

-- 1. Delete eventos passados do banco de dados (por exemplo, deletar eventos antes de uma data específica)
DELETE FROM Eventos
WHERE data < CURDATE();

-- 2. Cancelar inscrições de participantes para um evento específico (por exemplo, cancelar inscrição de id_evento = 1)
DELETE FROM Inscricoes
WHERE id_evento = 1;
